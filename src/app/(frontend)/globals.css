@import 'tailwindcss';
@import './colors.css';

/* COLORS: https://www.realtimecolors.com/?colors=282A36-f3f3f3-ff4400-E4FF1A-404E4D&fonts=Inter-Inter */
/* @config '../../../tailwind.config.js'; */
@custom-variant dark (&:where([data-theme=dark], [data-theme=dark] *));
@base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    /* Use themed border color */
    border-color: var(--color-border-default, currentcolor);
  }

  /* body background and text color are now primarily handled by className in layout.tsx */
  /* If you need to set them here, ensure they match or use the same CSS variables */
  /* body {
    background-color: var(--color-background);
    color: var(--color-foreground);
  } */

  /* Scrollbar Styles - apply to html for global effect and use themed variables */
  html {
    scrollbar-width: thin;
    scrollbar-color: var(--color-primary) var(--color-bg-subtle); /* thumb and track color */
  }

  html::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  html::-webkit-scrollbar-track {
    background: var(--color-bg-subtle); /* Themed track color */
    border-radius: 10px;
  }

  html::-webkit-scrollbar-thumb {
    background-color: var(--color-primary); /* Themed thumb color */
    border-radius: 10px;
    border: 2px solid var(--color-bg-subtle); /* Themed padding color */
  }

  html::-webkit-scrollbar-thumb:hover {
    /* Use a slightly darker shade of primary, ensure --color-orange-600 is suitable for both themes or create a specific hover var */
    background-color: var(--color-orange-600);
  }

  button, button * {
    @apply cursor-pointer;
  }

  p,
  ul,
  li { /* 'a' is styled separately below */
    @apply text-sm;
    color: var(--color-text-default); /* Use themed default text color */
  }

  a {
    @apply text-sm;
    color: var(--color-primary); /* Links use primary color by default */
    text-decoration: none;
    @apply transition-colors; /* Smooth transition for hover */
  }
  a:hover {
    /* Use a slightly darker/different shade of primary for hover */
    color: var(--color-orange-600); /* Or var(--color-primary-hover) if you define it */
    /* text-decoration: underline; /* Optional: add underline on hover */
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    color: var(--color-text-default); /* Use themed default text color */
    @apply font-bold;
  }
}

@utility animate-fade-in {
  animation: fadeIn 0.3s ease-out forwards;
}

@utility animate-scale-up {
  animation: scaleUp 0.3s ease-out forwards;
}

@layer components {
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  /* Project gallery styling */
  .project-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }

  .project-card {
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    transition: transform 0.2s ease-in-out;
    background-color: var(--color-bg-subtle); /* Use themed subtle background for cards */
    /* Add a border that uses the themed border color */
    border: 1px solid var(--color-border-default);
  }

  .project-card:hover {
    transform: translateY(-5px);
  }

  .project-card-image {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

  .project-card-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent); /* This gradient is dark */
    color: var(--color-smoke-950); /* This is a very light color, good for contrast on the dark gradient */
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  /*
    For .project-card-overlay in dark mode:
    The current setup (dark gradient, very light text) should generally work well in both light and dark modes
    because the overlay itself creates its own dark context for the text.
    If --color-bg-subtle (card background) becomes very dark in dark mode, this overlay will still look consistent.
    No specific .dark .project-card-overlay rule seems immediately necessary unless testing reveals issues.
  */

  .project-card:hover .project-card-overlay {
    opacity: 1;
  }
}

@layer utilities {
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes scaleUp {
    from {
      transform: scale(0.95);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1);
    }
  }
}
