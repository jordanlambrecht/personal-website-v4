@import 'tailwindcss';
@import './colors.css';

/* COLORS: https://www.realtimecolors.com/?colors=282A36-f3f3f3-ff4400-E4FF1A-404E4D&fonts=Inter-Inter */
/* @config '../../../tailwind.config.js'; */
@custom-variant dark (&:where([data-theme=dark], [data-theme=dark] *));

@theme inline {
  --font-sans: var(--font-funnel-sans);
  --font-display:  var(--font-fields);
  --font-mono:  var(--font-space-mono);
  /* --font-quasi:  var(--font-quasimoda); */
}
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    /* Use themed border color */
    border-color: var(--color-border-default, currentcolor);
  }

  /* body background and text color are now primarily handled by className in layout.tsx */
  /* If you need to set them here, ensure they match or use the same CSS variables */
  /* body {
    background-color: var(--color-background);
    color: var(--color-foreground);
  } */

  /* Scrollbar Styles - apply to html for global effect and use themed variables */
  html {
    scrollbar-width: thin;
    scrollbar-color: var(--color-scrollbar) var(--color-bg-subtle); /* thumb and track color */
    @apply font-sans transition-colors duration-300 ease-in;
  }

  html::-webkit-scrollbar {
    width: 20px;
    height: 10px;
  }

  html::-webkit-scrollbar-track {
    background: var(--color-bg-subtle); /* Themed track color */
    border-radius: 10px;
  }

  html::-webkit-scrollbar-thumb {
    @apply bg-orange dark:bg-lime;
    /* background-color: var(--color-primary); Themed thumb color */
    border-radius: 10px;
    border: 2px solid var(--color-bg-subtle); /* Themed padding color */
  }

  html::-webkit-scrollbar-thumb:hover {
    /* Use a slightly darker shade of primary, ensure --color-orange-600 is suitable for both themes or create a specific hover var */
    background-color: var(--color-orange-600);
  }

  button, button * {
    @apply cursor-pointer;
  }

  p,
  ul,
  li { /* 'a' is styled separately below */
    @apply text-sm;
    color: var(--color-text-default); /* Use themed default text color */
  }

  p a {
    @apply  text-orange hover:text-orange/50 underline underline-offset-4;

  }
  ul.list-bullet {
      @apply list-disc pl-4 list-outside;
    }
  ul.list-bullet li {
    @apply py-1;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    color: var(--color-text-default); /* Use themed default text color */
    @apply font-bold;
  }
  .payload-richtext ul.list-check > li > input[type="checkbox"],
  .payload-richtext ul.list-check > li > p > input[type="checkbox"]
  {
    /* Reset default appearance */
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;

    @apply inline-block relative border-1 border-foreground bg-bg-subtle rounded-md w-5 h-5 align-middle -top-0.75;



    margin-right: 0.6em; /* Space between checkbox and text */
    vertical-align: -0.2em; /* Fine-tune vertical alignment with text */
    transition: background-color 0.2s, border-color 0.2s;
    pointer-events: none; /* Makes the input non-interactive with the mouse */
  }
    /* Focus state for accessibility */
  .payload-richtext ul.list-check > li > input[type="checkbox"]:focus {
    outline: 2px solid var(--color-primary); /* Or your focus ring color variable */
    outline-offset: 2px;
    border-color: var(--color-primary);
  }
   .payload-richtext ul.list-check > li > input[type="checkbox"]:checked {
    background-color: var(--color-primary);
    border-color: var(--color-primary);
  }
   .payload-richtext ul.list-check > li > input[type="checkbox"]::before {
    content: "";
    display: block;
    position: absolute;
    top: 45%;
    left: 50%;
    width: 0.3em;  /* Width of the checkmark lines */
    height: 0.6em; /* Height of the checkmark lines */
    border-style: solid;
    /* Checkmark color - should contrast with --color-primary.
       Using a variable for text on primary background is best.
       If not available, white is a common fallback. */
    border-color: var(--color-text-on-primary, white);
    border-width: 0 0.15em 0.15em 0; /* Creates the "L" shape for the checkmark */
    transform: translate(-50%, -50%) rotate(45deg);
    opacity: 0;
    transition: opacity 0.1s ease-in-out;
  }
  .payload-richtext ul.list-check > li > input[type="checkbox"]:checked::before {
    opacity: 1; /* Show checkmark when checked */
  }

  /* Style for the label text when the item is checked */
  /* Leverages the class added by Lexical to the <li> element */
  .payload-richtext ul.list-check > li.list-item-checkbox-checked > label {
    text-decoration: line-through;
    color: var(--color-text-muted, #6b7280); /* Use your muted text color variable */
  }

  /* Ensure list items with checkboxes don't have default bullets
     (Lexical already adds list-style-type: none; inline, but this is a good fallback) */
  .payload-richtext ul.list-check > li {
    list-style-type: none !important; /* Override if necessary */
    padding-left: 0 !important; /* Reset padding */
    display: flex; /* Align checkbox and label nicely */
    align-items: flex-start; /* Align items to the start of the cross axis */
    margin-bottom: 0.5em; /* Add some space between checklist items */
  }

  .payload-richtext ul.list-check > li > label {
    display: inline; /* Or inline-block if more control is needed */
    line-height: 1.2em; /* Match checkbox height for better alignment */
    /* Allow label to take remaining space */
    flex-grow: 1;
  }
}

@utility animate-fade-in {
  animation: fadeIn 0.3s ease-out forwards;
}

@utility animate-scale-up {
  animation: scaleUp 0.3s ease-out forwards;
}

@layer components {

  /* Project gallery styling */
  .project-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }

  .project-card {
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    transition: transform 0.2s ease-in-out;
    background-color: var(--color-bg-subtle); /* Use themed subtle background for cards */
    /* Add a border that uses the themed border color */
    border: 1px solid var(--color-border-default);
  }

  .project-card:hover {
    transform: translateY(-5px);
  }

  .project-card-image {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

  .project-card-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent); /* This gradient is dark */
    color: var(--color-smoke-950); /* This is a very light color, good for contrast on the dark gradient */
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  /*
    For .project-card-overlay in dark mode:
    The current setup (dark gradient, very light text) should generally work well in both light and dark modes
    because the overlay itself creates its own dark context for the text.
    If --color-bg-subtle (card background) becomes very dark in dark mode, this overlay will still look consistent.
    No specific .dark .project-card-overlay rule seems immediately necessary unless testing reveals issues.
  */

  .project-card:hover .project-card-overlay {
    opacity: 1;
  }
}

@layer utilities {
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes scaleUp {
    from {
      transform: scale(0.95);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1);
    }
  }
}
