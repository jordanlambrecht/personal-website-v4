/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  serial,
  jsonb,
  boolean,
  timestamp,
  numeric,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_product_design_status = pgEnum('enum_product_design_status', [
  'draft',
  'published',
])
export const enum__product_design_v_version_status = pgEnum(
  'enum__product_design_v_version_status',
  ['draft', 'published'],
)
export const enum_other_projects_status = pgEnum('enum_other_projects_status', [
  'draft',
  'published',
])
export const enum__other_projects_v_version_status = pgEnum(
  'enum__other_projects_v_version_status',
  ['draft', 'published'],
)
export const enum_product_files_file_type = pgEnum('enum_product_files_file_type', [
  'stl',
  'gltf',
  'glb',
  'zip',
  'other',
])
export const enum_media_file_type = pgEnum('enum_media_file_type', [
  'image',
  'video',
  'document',
  'general',
])
export const enum_lists_status = pgEnum('enum_lists_status', ['draft', 'published'])
export const enum__lists_v_version_status = pgEnum('enum__lists_v_version_status', [
  'draft',
  'published',
])
export const enum_open_source_documents_resource_type = pgEnum(
  'enum_open_source_documents_resource_type',
  ['file', 'link'],
)
export const enum_open_source_documents_status = pgEnum('enum_open_source_documents_status', [
  'draft',
  'published',
])
export const enum__open_source_documents_v_version_resource_type = pgEnum(
  'enum__open_source_documents_v_version_resource_type',
  ['file', 'link'],
)
export const enum__open_source_documents_v_version_status = pgEnum(
  'enum__open_source_documents_v_version_status',
  ['draft', 'published'],
)
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_redirects_type = pgEnum('enum_redirects_type', ['301', '302'])

export const product_design_tags = pgTable(
  'product_design_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag'),
  },
  (columns) => ({
    _orderIdx: index('product_design_tags_order_idx').on(columns._order),
    _parentIDIdx: index('product_design_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product_design.id],
      name: 'product_design_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product_design = pgTable(
  'product_design',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: varchar('description'),
    details: jsonb('details'),
    enableExtraImages: boolean('enable_extra_images').default(false),
    enableWrittenContent: boolean('enable_written_content').default(false),
    extraRichTextContent: jsonb('extra_rich_text_content'),
    'visibility_visibility-home': boolean('visibility_visibility_home').default(true),
    'visibility_visibility-collection-page': boolean(
      'visibility_visibility_collection_page',
    ).default(true),
    pinned: boolean('pinned').default(false),
    favorited: boolean('favorited').default(false),
    enableMakerworld: boolean('enable_makerworld').default(false),
    enableDownload: boolean('enable_download').default(false),
    enablePurchase: boolean('enable_purchase').default(false),
    makerWorldLink: varchar('maker_world_link'),
    downloadLink: integer('download_link_id').references(() => product_files.id, {
      onDelete: 'set null',
    }),
    purchaseLink: varchar('purchase_link'),
    projectType: integer('project_type_id').references(() => labels.id, {
      onDelete: 'set null',
    }),
    datePublished: timestamp('date_published', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_product_design_status('_status').default('draft'),
  },
  (columns) => ({
    product_design_image_idx: index('product_design_image_idx').on(columns.image),
    product_design_visibility_visibility_visibility_home_idx: index(
      'product_design_visibility_visibility_visibility_home_idx',
    ).on(columns['visibility_visibility-home']),
    product_design_visibility_visibility_visibility_collection_page_idx: index(
      'product_design_visibility_visibility_visibility_collection_page_idx',
    ).on(columns['visibility_visibility-collection-page']),
    product_design_download_link_idx: index('product_design_download_link_idx').on(
      columns.downloadLink,
    ),
    product_design_project_type_idx: index('product_design_project_type_idx').on(
      columns.projectType,
    ),
    product_design_meta_meta_image_idx: index('product_design_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    product_design_updated_at_idx: index('product_design_updated_at_idx').on(columns.updatedAt),
    product_design_created_at_idx: index('product_design_created_at_idx').on(columns.createdAt),
    product_design__status_idx: index('product_design__status_idx').on(columns._status),
  }),
)

export const product_design_rels = pgTable(
  'product_design_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('product_design_rels_order_idx').on(columns.order),
    parentIdx: index('product_design_rels_parent_idx').on(columns.parent),
    pathIdx: index('product_design_rels_path_idx').on(columns.path),
    product_design_rels_media_id_idx: index('product_design_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [product_design.id],
      name: 'product_design_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'product_design_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const _product_design_v_version_tags = pgTable(
  '_product_design_v_version_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    tag: varchar('tag'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_product_design_v_version_tags_order_idx').on(columns._order),
    _parentIDIdx: index('_product_design_v_version_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_product_design_v.id],
      name: '_product_design_v_version_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _product_design_v = pgTable(
  '_product_design_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => product_design.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_description: varchar('version_description'),
    version_details: jsonb('version_details'),
    version_enableExtraImages: boolean('version_enable_extra_images').default(false),
    version_enableWrittenContent: boolean('version_enable_written_content').default(false),
    version_extraRichTextContent: jsonb('version_extra_rich_text_content'),
    'version_visibility_visibility-home': boolean('version_visibility_visibility_home').default(
      true,
    ),
    'version_visibility_visibility-collection-page': boolean(
      'version_visibility_visibility_collection_page',
    ).default(true),
    version_pinned: boolean('version_pinned').default(false),
    version_favorited: boolean('version_favorited').default(false),
    version_enableMakerworld: boolean('version_enable_makerworld').default(false),
    version_enableDownload: boolean('version_enable_download').default(false),
    version_enablePurchase: boolean('version_enable_purchase').default(false),
    version_makerWorldLink: varchar('version_maker_world_link'),
    version_downloadLink: integer('version_download_link_id').references(() => product_files.id, {
      onDelete: 'set null',
    }),
    version_purchaseLink: varchar('version_purchase_link'),
    version_projectType: integer('version_project_type_id').references(() => labels.id, {
      onDelete: 'set null',
    }),
    version_datePublished: timestamp('version_date_published', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_description: varchar('version_meta_description'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__product_design_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _product_design_v_parent_idx: index('_product_design_v_parent_idx').on(columns.parent),
    _product_design_v_version_version_image_idx: index(
      '_product_design_v_version_version_image_idx',
    ).on(columns.version_image),
    _product_design_v_version_visibility_version_visibility_visibility_home_idx: index(
      '_product_design_v_version_visibility_version_visibility_visibility_home_idx',
    ).on(columns['version_visibility_visibility-home']),
    _product_design_v_version_visibility_version_visibility_visibility_collection_page_idx: index(
      '_product_design_v_version_visibility_version_visibility_visibility_collection_page_idx',
    ).on(columns['version_visibility_visibility-collection-page']),
    _product_design_v_version_version_download_link_idx: index(
      '_product_design_v_version_version_download_link_idx',
    ).on(columns.version_downloadLink),
    _product_design_v_version_version_project_type_idx: index(
      '_product_design_v_version_version_project_type_idx',
    ).on(columns.version_projectType),
    _product_design_v_version_meta_version_meta_image_idx: index(
      '_product_design_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _product_design_v_version_version_updated_at_idx: index(
      '_product_design_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _product_design_v_version_version_created_at_idx: index(
      '_product_design_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _product_design_v_version_version__status_idx: index(
      '_product_design_v_version_version__status_idx',
    ).on(columns.version__status),
    _product_design_v_created_at_idx: index('_product_design_v_created_at_idx').on(
      columns.createdAt,
    ),
    _product_design_v_updated_at_idx: index('_product_design_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _product_design_v_latest_idx: index('_product_design_v_latest_idx').on(columns.latest),
    _product_design_v_autosave_idx: index('_product_design_v_autosave_idx').on(columns.autosave),
  }),
)

export const _product_design_v_rels = pgTable(
  '_product_design_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('_product_design_v_rels_order_idx').on(columns.order),
    parentIdx: index('_product_design_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_product_design_v_rels_path_idx').on(columns.path),
    _product_design_v_rels_media_id_idx: index('_product_design_v_rels_media_id_idx').on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_product_design_v.id],
      name: '_product_design_v_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: '_product_design_v_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const other_projects_tags = pgTable(
  'other_projects_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag'),
  },
  (columns) => ({
    _orderIdx: index('other_projects_tags_order_idx').on(columns._order),
    _parentIDIdx: index('other_projects_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [other_projects.id],
      name: 'other_projects_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const other_projects = pgTable(
  'other_projects',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: varchar('description'),
    details: jsonb('details'),
    enableExtraImages: boolean('enable_extra_images').default(false),
    enableWrittenContent: boolean('enable_written_content').default(false),
    extraRichTextContent: jsonb('extra_rich_text_content'),
    'visibility_visibility-home': boolean('visibility_visibility_home').default(true),
    'visibility_visibility-collection-page': boolean(
      'visibility_visibility_collection_page',
    ).default(true),
    projectLabel: integer('project_label_id').references(() => labels.id, {
      onDelete: 'set null',
    }),
    pinned: boolean('pinned'),
    favorited: boolean('favorited').default(false),
    projectLink: varchar('project_link'),
    dateCompleted: timestamp('date_completed', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_other_projects_status('_status').default('draft'),
  },
  (columns) => ({
    other_projects_image_idx: index('other_projects_image_idx').on(columns.image),
    other_projects_visibility_visibility_visibility_home_idx: index(
      'other_projects_visibility_visibility_visibility_home_idx',
    ).on(columns['visibility_visibility-home']),
    other_projects_visibility_visibility_visibility_collection_page_idx: index(
      'other_projects_visibility_visibility_visibility_collection_page_idx',
    ).on(columns['visibility_visibility-collection-page']),
    other_projects_project_label_idx: index('other_projects_project_label_idx').on(
      columns.projectLabel,
    ),
    other_projects_meta_meta_image_idx: index('other_projects_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    other_projects_updated_at_idx: index('other_projects_updated_at_idx').on(columns.updatedAt),
    other_projects_created_at_idx: index('other_projects_created_at_idx').on(columns.createdAt),
    other_projects__status_idx: index('other_projects__status_idx').on(columns._status),
  }),
)

export const other_projects_rels = pgTable(
  'other_projects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('other_projects_rels_order_idx').on(columns.order),
    parentIdx: index('other_projects_rels_parent_idx').on(columns.parent),
    pathIdx: index('other_projects_rels_path_idx').on(columns.path),
    other_projects_rels_media_id_idx: index('other_projects_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [other_projects.id],
      name: 'other_projects_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'other_projects_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const _other_projects_v_version_tags = pgTable(
  '_other_projects_v_version_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    tag: varchar('tag'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_other_projects_v_version_tags_order_idx').on(columns._order),
    _parentIDIdx: index('_other_projects_v_version_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_other_projects_v.id],
      name: '_other_projects_v_version_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _other_projects_v = pgTable(
  '_other_projects_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => other_projects.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_description: varchar('version_description'),
    version_details: jsonb('version_details'),
    version_enableExtraImages: boolean('version_enable_extra_images').default(false),
    version_enableWrittenContent: boolean('version_enable_written_content').default(false),
    version_extraRichTextContent: jsonb('version_extra_rich_text_content'),
    'version_visibility_visibility-home': boolean('version_visibility_visibility_home').default(
      true,
    ),
    'version_visibility_visibility-collection-page': boolean(
      'version_visibility_visibility_collection_page',
    ).default(true),
    version_projectLabel: integer('version_project_label_id').references(() => labels.id, {
      onDelete: 'set null',
    }),
    version_pinned: boolean('version_pinned'),
    version_favorited: boolean('version_favorited').default(false),
    version_projectLink: varchar('version_project_link'),
    version_dateCompleted: timestamp('version_date_completed', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_description: varchar('version_meta_description'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__other_projects_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _other_projects_v_parent_idx: index('_other_projects_v_parent_idx').on(columns.parent),
    _other_projects_v_version_version_image_idx: index(
      '_other_projects_v_version_version_image_idx',
    ).on(columns.version_image),
    _other_projects_v_version_visibility_version_visibility_visibility_home_idx: index(
      '_other_projects_v_version_visibility_version_visibility_visibility_home_idx',
    ).on(columns['version_visibility_visibility-home']),
    _other_projects_v_version_visibility_version_visibility_visibility_collection_page_idx: index(
      '_other_projects_v_version_visibility_version_visibility_visibility_collection_page_idx',
    ).on(columns['version_visibility_visibility-collection-page']),
    _other_projects_v_version_version_project_label_idx: index(
      '_other_projects_v_version_version_project_label_idx',
    ).on(columns.version_projectLabel),
    _other_projects_v_version_meta_version_meta_image_idx: index(
      '_other_projects_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _other_projects_v_version_version_updated_at_idx: index(
      '_other_projects_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _other_projects_v_version_version_created_at_idx: index(
      '_other_projects_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _other_projects_v_version_version__status_idx: index(
      '_other_projects_v_version_version__status_idx',
    ).on(columns.version__status),
    _other_projects_v_created_at_idx: index('_other_projects_v_created_at_idx').on(
      columns.createdAt,
    ),
    _other_projects_v_updated_at_idx: index('_other_projects_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _other_projects_v_latest_idx: index('_other_projects_v_latest_idx').on(columns.latest),
    _other_projects_v_autosave_idx: index('_other_projects_v_autosave_idx').on(columns.autosave),
  }),
)

export const _other_projects_v_rels = pgTable(
  '_other_projects_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('_other_projects_v_rels_order_idx').on(columns.order),
    parentIdx: index('_other_projects_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_other_projects_v_rels_path_idx').on(columns.path),
    _other_projects_v_rels_media_id_idx: index('_other_projects_v_rels_media_id_idx').on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_other_projects_v.id],
      name: '_other_projects_v_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: '_other_projects_v_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const product_files = pgTable(
  'product_files',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    fileDescription: varchar('file_description'),
    fileSize: numeric('file_size'),
    fileType: enum_product_files_file_type('file_type').default('stl'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    product_files_updated_at_idx: index('product_files_updated_at_idx').on(columns.updatedAt),
    product_files_created_at_idx: index('product_files_created_at_idx').on(columns.createdAt),
    product_files_filename_idx: uniqueIndex('product_files_filename_idx').on(columns.filename),
  }),
)

export const links = pgTable(
  'links',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    url: varchar('url').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    links_updated_at_idx: index('links_updated_at_idx').on(columns.updatedAt),
    links_created_at_idx: index('links_created_at_idx').on(columns.createdAt),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    username: varchar('username').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
    users_username_idx: uniqueIndex('users_username_idx').on(columns.username),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    fileType: enum_media_file_type('file_type'),
    prefix: varchar('prefix').default('uploads_default/'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename').notNull(),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const docs = pgTable(
  'docs',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    prefix: varchar('prefix').default('docs/'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename').notNull(),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    docs_updated_at_idx: index('docs_updated_at_idx').on(columns.updatedAt),
    docs_created_at_idx: index('docs_created_at_idx').on(columns.createdAt),
    docs_filename_idx: uniqueIndex('docs_filename_idx').on(columns.filename),
  }),
)

export const lists = pgTable(
  'lists',
  {
    id: serial('id').primaryKey(),
    emoji: varchar('emoji'),
    title: varchar('title'),
    subheader: varchar('subheader'),
    things: jsonb('things'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    images: integer('images_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    pinned: boolean('pinned').default(false),
    favorited: boolean('favorited').default(false),
    'visibility_visibility-home': boolean('visibility_visibility_home').default(true),
    'visibility_visibility-collection-page': boolean(
      'visibility_visibility_collection_page',
    ).default(true),
    projectType: integer('project_type_id').references(() => labels.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_lists_status('_status').default('draft'),
  },
  (columns) => ({
    lists_images_idx: index('lists_images_idx').on(columns.images),
    lists_visibility_visibility_visibility_home_idx: index(
      'lists_visibility_visibility_visibility_home_idx',
    ).on(columns['visibility_visibility-home']),
    lists_visibility_visibility_visibility_collection_page_idx: index(
      'lists_visibility_visibility_visibility_collection_page_idx',
    ).on(columns['visibility_visibility-collection-page']),
    lists_project_type_idx: index('lists_project_type_idx').on(columns.projectType),
    lists_meta_meta_image_idx: index('lists_meta_meta_image_idx').on(columns.meta_image),
    lists_updated_at_idx: index('lists_updated_at_idx').on(columns.updatedAt),
    lists_created_at_idx: index('lists_created_at_idx').on(columns.createdAt),
    lists__status_idx: index('lists__status_idx').on(columns._status),
  }),
)

export const _lists_v = pgTable(
  '_lists_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => lists.id, {
      onDelete: 'set null',
    }),
    version_emoji: varchar('version_emoji'),
    version_title: varchar('version_title'),
    version_subheader: varchar('version_subheader'),
    version_things: jsonb('version_things'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_images: integer('version_images_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_pinned: boolean('version_pinned').default(false),
    version_favorited: boolean('version_favorited').default(false),
    'version_visibility_visibility-home': boolean('version_visibility_visibility_home').default(
      true,
    ),
    'version_visibility_visibility-collection-page': boolean(
      'version_visibility_visibility_collection_page',
    ).default(true),
    version_projectType: integer('version_project_type_id').references(() => labels.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_description: varchar('version_meta_description'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__lists_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _lists_v_parent_idx: index('_lists_v_parent_idx').on(columns.parent),
    _lists_v_version_version_images_idx: index('_lists_v_version_version_images_idx').on(
      columns.version_images,
    ),
    _lists_v_version_visibility_version_visibility_visibility_home_idx: index(
      '_lists_v_version_visibility_version_visibility_visibility_home_idx',
    ).on(columns['version_visibility_visibility-home']),
    _lists_v_version_visibility_version_visibility_visibility_collection_page_idx: index(
      '_lists_v_version_visibility_version_visibility_visibility_collection_page_idx',
    ).on(columns['version_visibility_visibility-collection-page']),
    _lists_v_version_version_project_type_idx: index(
      '_lists_v_version_version_project_type_idx',
    ).on(columns.version_projectType),
    _lists_v_version_meta_version_meta_image_idx: index(
      '_lists_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _lists_v_version_version_updated_at_idx: index('_lists_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _lists_v_version_version_created_at_idx: index('_lists_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _lists_v_version_version__status_idx: index('_lists_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _lists_v_created_at_idx: index('_lists_v_created_at_idx').on(columns.createdAt),
    _lists_v_updated_at_idx: index('_lists_v_updated_at_idx').on(columns.updatedAt),
    _lists_v_latest_idx: index('_lists_v_latest_idx').on(columns.latest),
    _lists_v_autosave_idx: index('_lists_v_autosave_idx').on(columns.autosave),
  }),
)

export const labels = pgTable(
  'labels',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    colorLabelName: varchar('color_label_name'),
    bgColor: varchar('bg_color').notNull(),
    textColor: varchar('text_color'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    labels_name_idx: uniqueIndex('labels_name_idx').on(columns.name),
    labels_updated_at_idx: index('labels_updated_at_idx').on(columns.updatedAt),
    labels_created_at_idx: index('labels_created_at_idx').on(columns.createdAt),
  }),
)

export const pb_artifact_categories = pgTable(
  'pb_artifact_categories',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pb_artifact_categories_name_idx: uniqueIndex('pb_artifact_categories_name_idx').on(
      columns.name,
    ),
    pb_artifact_categories_updated_at_idx: index('pb_artifact_categories_updated_at_idx').on(
      columns.updatedAt,
    ),
    pb_artifact_categories_created_at_idx: index('pb_artifact_categories_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const pb_artifact_tags = pgTable(
  'pb_artifact_tags',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pb_artifact_tags_name_idx: uniqueIndex('pb_artifact_tags_name_idx').on(columns.name),
    pb_artifact_tags_updated_at_idx: index('pb_artifact_tags_updated_at_idx').on(columns.updatedAt),
    pb_artifact_tags_created_at_idx: index('pb_artifact_tags_created_at_idx').on(columns.createdAt),
  }),
)

export const open_source_documents = pgTable(
  'open_source_documents',
  {
    id: serial('id').primaryKey(),
    '_open-source-documents_usedInOpenSourceDocuments_order': varchar(
      '_open_source_documents_usedinopensourcedocuments_order',
    ),
    title: varchar('title'),
    publishedDate: timestamp('published_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    'pb-artifact-category': integer('pb_artifact_category_id').references(
      () => pb_artifact_categories.id,
      {
        onDelete: 'set null',
      },
    ),
    shortDescription: varchar('short_description'),
    resourceType: enum_open_source_documents_resource_type('resource_type').default('file'),
    documentFile: integer('document_file_id').references(() => docs.id, {
      onDelete: 'set null',
    }),
    documentLink: integer('document_link_id').references(() => links.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_open_source_documents_status('_status').default('draft'),
  },
  (columns) => ({
    open_source_documents__open_source_documents_usedinopensourcedocuments_order_idx: uniqueIndex(
      'open_source_documents__open_source_documents_usedinopensourcedocuments_order_idx',
    ).on(columns['_open-source-documents_usedInOpenSourceDocuments_order']),
    open_source_documents_pb_artifact_category_idx: index(
      'open_source_documents_pb_artifact_category_idx',
    ).on(columns['pb-artifact-category']),
    open_source_documents_document_file_idx: index('open_source_documents_document_file_idx').on(
      columns.documentFile,
    ),
    open_source_documents_document_link_idx: index('open_source_documents_document_link_idx').on(
      columns.documentLink,
    ),
    open_source_documents_updated_at_idx: index('open_source_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    open_source_documents_created_at_idx: index('open_source_documents_created_at_idx').on(
      columns.createdAt,
    ),
    open_source_documents__status_idx: index('open_source_documents__status_idx').on(
      columns._status,
    ),
  }),
)

export const open_source_documents_rels = pgTable(
  'open_source_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'pb-artifact-tagsID': integer('pb_artifact_tags_id'),
  },
  (columns) => ({
    order: index('open_source_documents_rels_order_idx').on(columns.order),
    parentIdx: index('open_source_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('open_source_documents_rels_path_idx').on(columns.path),
    open_source_documents_rels_pb_artifact_tags_id_idx: index(
      'open_source_documents_rels_pb_artifact_tags_id_idx',
    ).on(columns['pb-artifact-tagsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [open_source_documents.id],
      name: 'open_source_documents_rels_parent_fk',
    }).onDelete('cascade'),
    'pb-artifact-tagsIdFk': foreignKey({
      columns: [columns['pb-artifact-tagsID']],
      foreignColumns: [pb_artifact_tags.id],
      name: 'open_source_documents_rels_pb_artifact_tags_fk',
    }).onDelete('cascade'),
  }),
)

export const _open_source_documents_v = pgTable(
  '_open_source_documents_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => open_source_documents.id, {
      onDelete: 'set null',
    }),
    'version__open-source-documents_usedInOpenSourceDocuments_order': varchar(
      'version__open_source_documents_usedinopensourcedocuments_order',
    ),
    version_title: varchar('version_title'),
    version_publishedDate: timestamp('version_published_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    'version_pb-artifact-category': integer('version_pb_artifact_category_id').references(
      () => pb_artifact_categories.id,
      {
        onDelete: 'set null',
      },
    ),
    version_shortDescription: varchar('version_short_description'),
    version_resourceType:
      enum__open_source_documents_v_version_resource_type('version_resource_type').default('file'),
    version_documentFile: integer('version_document_file_id').references(() => docs.id, {
      onDelete: 'set null',
    }),
    version_documentLink: integer('version_document_link_id').references(() => links.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__open_source_documents_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _open_source_documents_v_parent_idx: index('_open_source_documents_v_parent_idx').on(
      columns.parent,
    ),
    _open_source_documents_v_version_version__open_source_documents_usedinopensourcedocuments_order_idx:
      index(
        '_open_source_documents_v_version_version__open_source_documents_usedinopensourcedocuments_order_idx',
      ).on(columns['version__open-source-documents_usedInOpenSourceDocuments_order']),
    _open_source_documents_v_version_version_pb_artifact_category_idx: index(
      '_open_source_documents_v_version_version_pb_artifact_category_idx',
    ).on(columns['version_pb-artifact-category']),
    _open_source_documents_v_version_version_document_file_idx: index(
      '_open_source_documents_v_version_version_document_file_idx',
    ).on(columns.version_documentFile),
    _open_source_documents_v_version_version_document_link_idx: index(
      '_open_source_documents_v_version_version_document_link_idx',
    ).on(columns.version_documentLink),
    _open_source_documents_v_version_version_updated_at_idx: index(
      '_open_source_documents_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _open_source_documents_v_version_version_created_at_idx: index(
      '_open_source_documents_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _open_source_documents_v_version_version__status_idx: index(
      '_open_source_documents_v_version_version__status_idx',
    ).on(columns.version__status),
    _open_source_documents_v_created_at_idx: index('_open_source_documents_v_created_at_idx').on(
      columns.createdAt,
    ),
    _open_source_documents_v_updated_at_idx: index('_open_source_documents_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _open_source_documents_v_latest_idx: index('_open_source_documents_v_latest_idx').on(
      columns.latest,
    ),
    _open_source_documents_v_autosave_idx: index('_open_source_documents_v_autosave_idx').on(
      columns.autosave,
    ),
  }),
)

export const _open_source_documents_v_rels = pgTable(
  '_open_source_documents_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'pb-artifact-tagsID': integer('pb_artifact_tags_id'),
  },
  (columns) => ({
    order: index('_open_source_documents_v_rels_order_idx').on(columns.order),
    parentIdx: index('_open_source_documents_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_open_source_documents_v_rels_path_idx').on(columns.path),
    _open_source_documents_v_rels_pb_artifact_tags_id_idx: index(
      '_open_source_documents_v_rels_pb_artifact_tags_id_idx',
    ).on(columns['pb-artifact-tagsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_open_source_documents_v.id],
      name: '_open_source_documents_v_rels_parent_fk',
    }).onDelete('cascade'),
    'pb-artifact-tagsIdFk': foreignKey({
      columns: [columns['pb-artifact-tagsID']],
      foreignColumns: [pb_artifact_tags.id],
      name: '_open_source_documents_v_rels_pb_artifact_tags_fk',
    }).onDelete('cascade'),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    type: enum_redirects_type('type').notNull(),
    customField: varchar('custom_field'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'product-designID': integer('product_design_id'),
    listsID: integer('lists_id'),
    'other-projectsID': integer('other_projects_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_product_design_id_idx: index('redirects_rels_product_design_id_idx').on(
      columns['product-designID'],
    ),
    redirects_rels_lists_id_idx: index('redirects_rels_lists_id_idx').on(columns.listsID),
    redirects_rels_other_projects_id_idx: index('redirects_rels_other_projects_id_idx').on(
      columns['other-projectsID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    'product-designIdFk': foreignKey({
      columns: [columns['product-designID']],
      foreignColumns: [product_design.id],
      name: 'redirects_rels_product_design_fk',
    }).onDelete('cascade'),
    listsIdFk: foreignKey({
      columns: [columns['listsID']],
      foreignColumns: [lists.id],
      name: 'redirects_rels_lists_fk',
    }).onDelete('cascade'),
    'other-projectsIdFk': foreignKey({
      columns: [columns['other-projectsID']],
      foreignColumns: [other_projects.id],
      name: 'redirects_rels_other_projects_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'product-designID': integer('product_design_id'),
    'other-projectsID': integer('other_projects_id'),
    'product-filesID': integer('product_files_id'),
    linksID: integer('links_id'),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    docsID: integer('docs_id'),
    listsID: integer('lists_id'),
    labelsID: integer('labels_id'),
    'pb-artifact-categoriesID': integer('pb_artifact_categories_id'),
    'pb-artifact-tagsID': integer('pb_artifact_tags_id'),
    'open-source-documentsID': integer('open_source_documents_id'),
    redirectsID: integer('redirects_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_product_design_id_idx: index(
      'payload_locked_documents_rels_product_design_id_idx',
    ).on(columns['product-designID']),
    payload_locked_documents_rels_other_projects_id_idx: index(
      'payload_locked_documents_rels_other_projects_id_idx',
    ).on(columns['other-projectsID']),
    payload_locked_documents_rels_product_files_id_idx: index(
      'payload_locked_documents_rels_product_files_id_idx',
    ).on(columns['product-filesID']),
    payload_locked_documents_rels_links_id_idx: index(
      'payload_locked_documents_rels_links_id_idx',
    ).on(columns.linksID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_docs_id_idx: index(
      'payload_locked_documents_rels_docs_id_idx',
    ).on(columns.docsID),
    payload_locked_documents_rels_lists_id_idx: index(
      'payload_locked_documents_rels_lists_id_idx',
    ).on(columns.listsID),
    payload_locked_documents_rels_labels_id_idx: index(
      'payload_locked_documents_rels_labels_id_idx',
    ).on(columns.labelsID),
    payload_locked_documents_rels_pb_artifact_categories_id_idx: index(
      'payload_locked_documents_rels_pb_artifact_categories_id_idx',
    ).on(columns['pb-artifact-categoriesID']),
    payload_locked_documents_rels_pb_artifact_tags_id_idx: index(
      'payload_locked_documents_rels_pb_artifact_tags_id_idx',
    ).on(columns['pb-artifact-tagsID']),
    payload_locked_documents_rels_open_source_documents_id_idx: index(
      'payload_locked_documents_rels_open_source_documents_id_idx',
    ).on(columns['open-source-documentsID']),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    'product-designIdFk': foreignKey({
      columns: [columns['product-designID']],
      foreignColumns: [product_design.id],
      name: 'payload_locked_documents_rels_product_design_fk',
    }).onDelete('cascade'),
    'other-projectsIdFk': foreignKey({
      columns: [columns['other-projectsID']],
      foreignColumns: [other_projects.id],
      name: 'payload_locked_documents_rels_other_projects_fk',
    }).onDelete('cascade'),
    'product-filesIdFk': foreignKey({
      columns: [columns['product-filesID']],
      foreignColumns: [product_files.id],
      name: 'payload_locked_documents_rels_product_files_fk',
    }).onDelete('cascade'),
    linksIdFk: foreignKey({
      columns: [columns['linksID']],
      foreignColumns: [links.id],
      name: 'payload_locked_documents_rels_links_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    docsIdFk: foreignKey({
      columns: [columns['docsID']],
      foreignColumns: [docs.id],
      name: 'payload_locked_documents_rels_docs_fk',
    }).onDelete('cascade'),
    listsIdFk: foreignKey({
      columns: [columns['listsID']],
      foreignColumns: [lists.id],
      name: 'payload_locked_documents_rels_lists_fk',
    }).onDelete('cascade'),
    labelsIdFk: foreignKey({
      columns: [columns['labelsID']],
      foreignColumns: [labels.id],
      name: 'payload_locked_documents_rels_labels_fk',
    }).onDelete('cascade'),
    'pb-artifact-categoriesIdFk': foreignKey({
      columns: [columns['pb-artifact-categoriesID']],
      foreignColumns: [pb_artifact_categories.id],
      name: 'payload_locked_documents_rels_pb_artifact_categories_fk',
    }).onDelete('cascade'),
    'pb-artifact-tagsIdFk': foreignKey({
      columns: [columns['pb-artifact-tagsID']],
      foreignColumns: [pb_artifact_tags.id],
      name: 'payload_locked_documents_rels_pb_artifact_tags_fk',
    }).onDelete('cascade'),
    'open-source-documentsIdFk': foreignKey({
      columns: [columns['open-source-documentsID']],
      foreignColumns: [open_source_documents.id],
      name: 'payload_locked_documents_rels_open_source_documents_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const site_settings = pgTable('site_settings', {
  id: serial('id').primaryKey(),
  maintenanceMode: boolean('maintenance_mode').default(false),
  showPixelBakery: boolean('show_pixel_bakery').default(true),
  showProductDesigns: boolean('show_product_designs').default(true),
  showOtherProjects: boolean('show_other_projects').default(true),
  showLists: boolean('show_lists').default(true),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_product_design_tags = relations(product_design_tags, ({ one }) => ({
  _parentID: one(product_design, {
    fields: [product_design_tags._parentID],
    references: [product_design.id],
    relationName: 'tags',
  }),
}))
export const relations_product_design_rels = relations(product_design_rels, ({ one }) => ({
  parent: one(product_design, {
    fields: [product_design_rels.parent],
    references: [product_design.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [product_design_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_product_design = relations(product_design, ({ one, many }) => ({
  image: one(media, {
    fields: [product_design.image],
    references: [media.id],
    relationName: 'image',
  }),
  downloadLink: one(product_files, {
    fields: [product_design.downloadLink],
    references: [product_files.id],
    relationName: 'downloadLink',
  }),
  projectType: one(labels, {
    fields: [product_design.projectType],
    references: [labels.id],
    relationName: 'projectType',
  }),
  tags: many(product_design_tags, {
    relationName: 'tags',
  }),
  meta_image: one(media, {
    fields: [product_design.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(product_design_rels, {
    relationName: '_rels',
  }),
}))
export const relations__product_design_v_version_tags = relations(
  _product_design_v_version_tags,
  ({ one }) => ({
    _parentID: one(_product_design_v, {
      fields: [_product_design_v_version_tags._parentID],
      references: [_product_design_v.id],
      relationName: 'version_tags',
    }),
  }),
)
export const relations__product_design_v_rels = relations(_product_design_v_rels, ({ one }) => ({
  parent: one(_product_design_v, {
    fields: [_product_design_v_rels.parent],
    references: [_product_design_v.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [_product_design_v_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations__product_design_v = relations(_product_design_v, ({ one, many }) => ({
  parent: one(product_design, {
    fields: [_product_design_v.parent],
    references: [product_design.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_product_design_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_downloadLink: one(product_files, {
    fields: [_product_design_v.version_downloadLink],
    references: [product_files.id],
    relationName: 'version_downloadLink',
  }),
  version_projectType: one(labels, {
    fields: [_product_design_v.version_projectType],
    references: [labels.id],
    relationName: 'version_projectType',
  }),
  version_tags: many(_product_design_v_version_tags, {
    relationName: 'version_tags',
  }),
  version_meta_image: one(media, {
    fields: [_product_design_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_product_design_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_other_projects_tags = relations(other_projects_tags, ({ one }) => ({
  _parentID: one(other_projects, {
    fields: [other_projects_tags._parentID],
    references: [other_projects.id],
    relationName: 'tags',
  }),
}))
export const relations_other_projects_rels = relations(other_projects_rels, ({ one }) => ({
  parent: one(other_projects, {
    fields: [other_projects_rels.parent],
    references: [other_projects.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [other_projects_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_other_projects = relations(other_projects, ({ one, many }) => ({
  image: one(media, {
    fields: [other_projects.image],
    references: [media.id],
    relationName: 'image',
  }),
  projectLabel: one(labels, {
    fields: [other_projects.projectLabel],
    references: [labels.id],
    relationName: 'projectLabel',
  }),
  tags: many(other_projects_tags, {
    relationName: 'tags',
  }),
  meta_image: one(media, {
    fields: [other_projects.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(other_projects_rels, {
    relationName: '_rels',
  }),
}))
export const relations__other_projects_v_version_tags = relations(
  _other_projects_v_version_tags,
  ({ one }) => ({
    _parentID: one(_other_projects_v, {
      fields: [_other_projects_v_version_tags._parentID],
      references: [_other_projects_v.id],
      relationName: 'version_tags',
    }),
  }),
)
export const relations__other_projects_v_rels = relations(_other_projects_v_rels, ({ one }) => ({
  parent: one(_other_projects_v, {
    fields: [_other_projects_v_rels.parent],
    references: [_other_projects_v.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [_other_projects_v_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations__other_projects_v = relations(_other_projects_v, ({ one, many }) => ({
  parent: one(other_projects, {
    fields: [_other_projects_v.parent],
    references: [other_projects.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_other_projects_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_projectLabel: one(labels, {
    fields: [_other_projects_v.version_projectLabel],
    references: [labels.id],
    relationName: 'version_projectLabel',
  }),
  version_tags: many(_other_projects_v_version_tags, {
    relationName: 'version_tags',
  }),
  version_meta_image: one(media, {
    fields: [_other_projects_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_other_projects_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_product_files = relations(product_files, () => ({}))
export const relations_links = relations(links, () => ({}))
export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_docs = relations(docs, () => ({}))
export const relations_lists = relations(lists, ({ one }) => ({
  images: one(media, {
    fields: [lists.images],
    references: [media.id],
    relationName: 'images',
  }),
  projectType: one(labels, {
    fields: [lists.projectType],
    references: [labels.id],
    relationName: 'projectType',
  }),
  meta_image: one(media, {
    fields: [lists.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations__lists_v = relations(_lists_v, ({ one }) => ({
  parent: one(lists, {
    fields: [_lists_v.parent],
    references: [lists.id],
    relationName: 'parent',
  }),
  version_images: one(media, {
    fields: [_lists_v.version_images],
    references: [media.id],
    relationName: 'version_images',
  }),
  version_projectType: one(labels, {
    fields: [_lists_v.version_projectType],
    references: [labels.id],
    relationName: 'version_projectType',
  }),
  version_meta_image: one(media, {
    fields: [_lists_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations_labels = relations(labels, () => ({}))
export const relations_pb_artifact_categories = relations(pb_artifact_categories, () => ({}))
export const relations_pb_artifact_tags = relations(pb_artifact_tags, () => ({}))
export const relations_open_source_documents_rels = relations(
  open_source_documents_rels,
  ({ one }) => ({
    parent: one(open_source_documents, {
      fields: [open_source_documents_rels.parent],
      references: [open_source_documents.id],
      relationName: '_rels',
    }),
    'pb-artifact-tagsID': one(pb_artifact_tags, {
      fields: [open_source_documents_rels['pb-artifact-tagsID']],
      references: [pb_artifact_tags.id],
      relationName: 'pb-artifact-tags',
    }),
  }),
)
export const relations_open_source_documents = relations(
  open_source_documents,
  ({ one, many }) => ({
    'pb-artifact-category': one(pb_artifact_categories, {
      fields: [open_source_documents['pb-artifact-category']],
      references: [pb_artifact_categories.id],
      relationName: 'pb-artifact-category',
    }),
    documentFile: one(docs, {
      fields: [open_source_documents.documentFile],
      references: [docs.id],
      relationName: 'documentFile',
    }),
    documentLink: one(links, {
      fields: [open_source_documents.documentLink],
      references: [links.id],
      relationName: 'documentLink',
    }),
    _rels: many(open_source_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations__open_source_documents_v_rels = relations(
  _open_source_documents_v_rels,
  ({ one }) => ({
    parent: one(_open_source_documents_v, {
      fields: [_open_source_documents_v_rels.parent],
      references: [_open_source_documents_v.id],
      relationName: '_rels',
    }),
    'pb-artifact-tagsID': one(pb_artifact_tags, {
      fields: [_open_source_documents_v_rels['pb-artifact-tagsID']],
      references: [pb_artifact_tags.id],
      relationName: 'pb-artifact-tags',
    }),
  }),
)
export const relations__open_source_documents_v = relations(
  _open_source_documents_v,
  ({ one, many }) => ({
    parent: one(open_source_documents, {
      fields: [_open_source_documents_v.parent],
      references: [open_source_documents.id],
      relationName: 'parent',
    }),
    'version_pb-artifact-category': one(pb_artifact_categories, {
      fields: [_open_source_documents_v['version_pb-artifact-category']],
      references: [pb_artifact_categories.id],
      relationName: 'version_pb-artifact-category',
    }),
    version_documentFile: one(docs, {
      fields: [_open_source_documents_v.version_documentFile],
      references: [docs.id],
      relationName: 'version_documentFile',
    }),
    version_documentLink: one(links, {
      fields: [_open_source_documents_v.version_documentLink],
      references: [links.id],
      relationName: 'version_documentLink',
    }),
    _rels: many(_open_source_documents_v_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  'product-designID': one(product_design, {
    fields: [redirects_rels['product-designID']],
    references: [product_design.id],
    relationName: 'product-design',
  }),
  listsID: one(lists, {
    fields: [redirects_rels.listsID],
    references: [lists.id],
    relationName: 'lists',
  }),
  'other-projectsID': one(other_projects, {
    fields: [redirects_rels['other-projectsID']],
    references: [other_projects.id],
    relationName: 'other-projects',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    'product-designID': one(product_design, {
      fields: [payload_locked_documents_rels['product-designID']],
      references: [product_design.id],
      relationName: 'product-design',
    }),
    'other-projectsID': one(other_projects, {
      fields: [payload_locked_documents_rels['other-projectsID']],
      references: [other_projects.id],
      relationName: 'other-projects',
    }),
    'product-filesID': one(product_files, {
      fields: [payload_locked_documents_rels['product-filesID']],
      references: [product_files.id],
      relationName: 'product-files',
    }),
    linksID: one(links, {
      fields: [payload_locked_documents_rels.linksID],
      references: [links.id],
      relationName: 'links',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    docsID: one(docs, {
      fields: [payload_locked_documents_rels.docsID],
      references: [docs.id],
      relationName: 'docs',
    }),
    listsID: one(lists, {
      fields: [payload_locked_documents_rels.listsID],
      references: [lists.id],
      relationName: 'lists',
    }),
    labelsID: one(labels, {
      fields: [payload_locked_documents_rels.labelsID],
      references: [labels.id],
      relationName: 'labels',
    }),
    'pb-artifact-categoriesID': one(pb_artifact_categories, {
      fields: [payload_locked_documents_rels['pb-artifact-categoriesID']],
      references: [pb_artifact_categories.id],
      relationName: 'pb-artifact-categories',
    }),
    'pb-artifact-tagsID': one(pb_artifact_tags, {
      fields: [payload_locked_documents_rels['pb-artifact-tagsID']],
      references: [pb_artifact_tags.id],
      relationName: 'pb-artifact-tags',
    }),
    'open-source-documentsID': one(open_source_documents, {
      fields: [payload_locked_documents_rels['open-source-documentsID']],
      references: [open_source_documents.id],
      relationName: 'open-source-documents',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_site_settings = relations(site_settings, () => ({}))

type DatabaseSchema = {
  enum_product_design_status: typeof enum_product_design_status
  enum__product_design_v_version_status: typeof enum__product_design_v_version_status
  enum_other_projects_status: typeof enum_other_projects_status
  enum__other_projects_v_version_status: typeof enum__other_projects_v_version_status
  enum_product_files_file_type: typeof enum_product_files_file_type
  enum_media_file_type: typeof enum_media_file_type
  enum_lists_status: typeof enum_lists_status
  enum__lists_v_version_status: typeof enum__lists_v_version_status
  enum_open_source_documents_resource_type: typeof enum_open_source_documents_resource_type
  enum_open_source_documents_status: typeof enum_open_source_documents_status
  enum__open_source_documents_v_version_resource_type: typeof enum__open_source_documents_v_version_resource_type
  enum__open_source_documents_v_version_status: typeof enum__open_source_documents_v_version_status
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_redirects_type: typeof enum_redirects_type
  product_design_tags: typeof product_design_tags
  product_design: typeof product_design
  product_design_rels: typeof product_design_rels
  _product_design_v_version_tags: typeof _product_design_v_version_tags
  _product_design_v: typeof _product_design_v
  _product_design_v_rels: typeof _product_design_v_rels
  other_projects_tags: typeof other_projects_tags
  other_projects: typeof other_projects
  other_projects_rels: typeof other_projects_rels
  _other_projects_v_version_tags: typeof _other_projects_v_version_tags
  _other_projects_v: typeof _other_projects_v
  _other_projects_v_rels: typeof _other_projects_v_rels
  product_files: typeof product_files
  links: typeof links
  users: typeof users
  media: typeof media
  docs: typeof docs
  lists: typeof lists
  _lists_v: typeof _lists_v
  labels: typeof labels
  pb_artifact_categories: typeof pb_artifact_categories
  pb_artifact_tags: typeof pb_artifact_tags
  open_source_documents: typeof open_source_documents
  open_source_documents_rels: typeof open_source_documents_rels
  _open_source_documents_v: typeof _open_source_documents_v
  _open_source_documents_v_rels: typeof _open_source_documents_v_rels
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  site_settings: typeof site_settings
  relations_product_design_tags: typeof relations_product_design_tags
  relations_product_design_rels: typeof relations_product_design_rels
  relations_product_design: typeof relations_product_design
  relations__product_design_v_version_tags: typeof relations__product_design_v_version_tags
  relations__product_design_v_rels: typeof relations__product_design_v_rels
  relations__product_design_v: typeof relations__product_design_v
  relations_other_projects_tags: typeof relations_other_projects_tags
  relations_other_projects_rels: typeof relations_other_projects_rels
  relations_other_projects: typeof relations_other_projects
  relations__other_projects_v_version_tags: typeof relations__other_projects_v_version_tags
  relations__other_projects_v_rels: typeof relations__other_projects_v_rels
  relations__other_projects_v: typeof relations__other_projects_v
  relations_product_files: typeof relations_product_files
  relations_links: typeof relations_links
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_docs: typeof relations_docs
  relations_lists: typeof relations_lists
  relations__lists_v: typeof relations__lists_v
  relations_labels: typeof relations_labels
  relations_pb_artifact_categories: typeof relations_pb_artifact_categories
  relations_pb_artifact_tags: typeof relations_pb_artifact_tags
  relations_open_source_documents_rels: typeof relations_open_source_documents_rels
  relations_open_source_documents: typeof relations_open_source_documents
  relations__open_source_documents_v_rels: typeof relations__open_source_documents_v_rels
  relations__open_source_documents_v: typeof relations__open_source_documents_v
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_site_settings: typeof relations_site_settings
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
